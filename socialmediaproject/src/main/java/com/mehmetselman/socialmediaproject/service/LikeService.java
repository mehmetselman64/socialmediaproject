package com.mehmetselman.socialmediaproject.service;

import com.mehmetselman.socialmediaproject.entity.Like;
import com.mehmetselman.socialmediaproject.entity.Post;
import com.mehmetselman.socialmediaproject.entity.User;
import com.mehmetselman.socialmediaproject.repository.LikeRepository;
import com.mehmetselman.socialmediaproject.repository.PostRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * âœ… LikeService
 *
 * Bu servis, gÃ¶nderilere yapÄ±lan beÄŸeni (Like) iÅŸlemlerini yÃ¶netir.
 *
 * SaÄŸladÄ±ÄŸÄ± iÅŸlemler:
 *  - KullanÄ±cÄ± bir gÃ¶nderiyi beÄŸenir (like)
 *  - KullanÄ±cÄ± beÄŸenisini geri alÄ±r (unlike)
 */
@Service
public class LikeService {

    @Autowired
    private LikeRepository likeRepository;

    @Autowired
    private PostRepository postRepository;

    /**
     * ğŸ§© KullanÄ±cÄ± bir gÃ¶nderiyi beÄŸenir.
     *
     * - EÄŸer kullanÄ±cÄ± zaten o gÃ¶nderiyi beÄŸenmiÅŸse hata fÄ±rlatÄ±r.
     * - Yeni bir Like nesnesi oluÅŸturur ve veritabanÄ±na kaydeder.
     * - Postâ€™un likeCount (beÄŸeni sayÄ±sÄ±) deÄŸerini 1 artÄ±rÄ±r.
     *
     * @param user   BeÄŸeniyi yapan kullanÄ±cÄ±
     * @param postId BeÄŸenilen gÃ¶nderinin IDâ€™si
     */
    @Transactional
    public void likePost(User user, Long postId) {
        Post post = postRepository.findById(postId)
                .orElseThrow(() -> new RuntimeException("Post bulunamadÄ±!"));

        // AynÄ± kullanÄ±cÄ± aynÄ± gÃ¶nderiyi tekrar beÄŸenmesin
        if (likeRepository.existsByUserAndPost(user, post)) {
            throw new RuntimeException("Bu gÃ¶nderiyi zaten beÄŸendiniz!");
        }

        // Yeni beÄŸeni oluÅŸtur ve kaydet
        Like like = new Like();
        like.setUser(user);
        like.setPost(post);
        likeRepository.save(like);

        // Postâ€™un beÄŸeni sayÄ±sÄ±nÄ± artÄ±r
        post.setLikeCount(post.getLikeCount() + 1);
        postRepository.save(post);
    }

    /**
     * ğŸ§© KullanÄ±cÄ± bir gÃ¶nderinin beÄŸenisini kaldÄ±rÄ±r.
     *
     * - EÄŸer kullanÄ±cÄ± gÃ¶nderiyi beÄŸenmemiÅŸse hata fÄ±rlatÄ±r.
     * - Ä°lgili Like kaydÄ±nÄ± siler.
     * - Postâ€™un likeCount deÄŸerini 1 azaltÄ±r (0â€™Ä±n altÄ±na dÃ¼ÅŸmez).
     *
     * @param user   BeÄŸeniyi kaldÄ±ran kullanÄ±cÄ±
     * @param postId BeÄŸenisi kaldÄ±rÄ±lacak gÃ¶nderinin IDâ€™si
     */
    @Transactional
    public void unlikePost(User user, Long postId) {
        Post post = postRepository.findById(postId)
                .orElseThrow(() -> new RuntimeException("Post bulunamadÄ±!"));

        Like like = likeRepository.findByUserAndPost(user, post);
        if (like == null) {
            throw new RuntimeException("Bu gÃ¶nderiyi zaten beÄŸenmemiÅŸsiniz!");
        }

        // BeÄŸeniyi sil
        likeRepository.delete(like);

        // BeÄŸeni sayÄ±sÄ±nÄ± azalt (0â€™Ä±n altÄ±na dÃ¼ÅŸmesin)
        post.setLikeCount(Math.max(0, post.getLikeCount() - 1));
        postRepository.save(post);
    }
}
