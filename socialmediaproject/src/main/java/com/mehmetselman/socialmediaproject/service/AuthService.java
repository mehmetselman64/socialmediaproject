package com.mehmetselman.socialmediaproject.service;

import com.mehmetselman.socialmediaproject.entity.Token;
import com.mehmetselman.socialmediaproject.entity.User;
import com.mehmetselman.socialmediaproject.enums.Role;
import com.mehmetselman.socialmediaproject.repository.TokenRepository;
import com.mehmetselman.socialmediaproject.repository.UserRepository;
import com.mehmetselman.socialmediaproject.util.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

/**
 * âœ… AuthService
 *
 * KullanÄ±cÄ± kimlik doÄŸrulama (authentication) iÅŸlemlerinden sorumludur.
 *
 * SaÄŸladÄ±ÄŸÄ± temel iÅŸlemler:
 *  - Yeni kullanÄ±cÄ± kaydÄ± (signup)
 *  - GiriÅŸ yapma ve JWT token oluÅŸturma (login)
 *  - Oturum kapatma / token silme (logout)
 *  - Me endpoint'i Ã¼zerinden mevcut kullanÄ±cÄ±yÄ± dÃ¶ndÃ¼rme (getMe)
 */
@Service
public class AuthService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private TokenRepository tokenRepository;

    /**
     * ğŸ”¹ Yeni kullanÄ±cÄ± kaydÄ± oluÅŸturur.
     * - AynÄ± kullanÄ±cÄ± adÄ± mevcutsa hata fÄ±rlatÄ±r.
     * - Yeni kullanÄ±cÄ±ya varsayÄ±lan olarak "USER" rolÃ¼ atanÄ±r.
     *
     * @param username Yeni kullanÄ±cÄ±nÄ±n adÄ±
     * @param password Yeni kullanÄ±cÄ±nÄ±n ÅŸifresi
     * @return Kaydedilen kullanÄ±cÄ± nesnesi
     */
    public User signup(String username, String password) {
        if (userRepository.findByUsername(username) != null)
            throw new RuntimeException("KullanÄ±cÄ± adÄ± zaten var. FarklÄ± bir kullanÄ±cÄ± adÄ± giriniz.");

        User user = new User();
        user.setUsername(username);
        user.setPassword(password);
        user.setRole(Role.USER);

        return userRepository.save(user);
    }

    /**
     * ğŸ”¹ KullanÄ±cÄ± giriÅŸ yapar ve yeni bir JWT token oluÅŸturur.
     * - KullanÄ±cÄ± adÄ± veya parola yanlÄ±ÅŸsa hata fÄ±rlatÄ±r.
     * - AynÄ± kullanÄ±cÄ±ya ait eski tokenlar veritabanÄ±ndan silinir.
     * - Yeni token 1 saat geÃ§erli olacak ÅŸekilde oluÅŸturulur.
     *
     * @param username GiriÅŸ yapan kullanÄ±cÄ±nÄ±n adÄ±
     * @param password GiriÅŸ yapan kullanÄ±cÄ±nÄ±n parolasÄ±
     * @return Token bilgilerini iÃ§eren bir Map (token, expiry, username, role)
     */
    @Transactional
    public Map<String, Object> login(String username, String password) {
        User user = userRepository.findByUsername(username);

        if (user == null || !user.getPassword().equals(password))
            throw new RuntimeException("GeÃ§ersiz kullanÄ±cÄ± adÄ± veya parola!");

        // Eski token'larÄ± temizle
        tokenRepository.deleteAllByUser(user);

        // Yeni JWT oluÅŸtur
        String tokenStr = JwtUtil.generateToken(user, 3600000L); // 1 saat = 3600000 ms

        Token token = new Token();
        token.setToken(tokenStr);
        token.setUser(user);
        token.setExpiryDate(LocalDateTime.now().plusHours(1));
        tokenRepository.save(token);

        // YanÄ±t olarak kullanÄ±cÄ± bilgileri ve token dÃ¶ner
        Map<String, Object> response = new HashMap<>();
        response.put("token", tokenStr);
        response.put("expiry", token.getExpiryDate());
        response.put("username", user.getUsername());
        response.put("role", user.getRole());

        return response;
    }

    /**
     * ğŸ”¹ Ã‡Ä±kÄ±ÅŸ iÅŸlemini gerÃ§ekleÅŸtirir.
     * - Ä°lgili JWT token veritabanÄ±ndan silinir.
     *
     * @param tokenStr Silinecek token string deÄŸeri
     */
    @Transactional
    public void logout(String tokenStr) {
        Token token = tokenRepository.findByToken(tokenStr);
        if (token != null) {
            tokenRepository.delete(token);
        }
    }

    /**
     * ğŸ”¹ "Me" endpoint'i iÃ§in mevcut kullanÄ±cÄ±yÄ± dÃ¶ner.
     * - EÄŸer kullanÄ±cÄ± bulunamazsa (Ã¶rneÄŸin token geÃ§ersizse), hata fÄ±rlatÄ±r.
     *
     * @param currentUser GeÃ§erli (token'dan alÄ±nan) kullanÄ±cÄ±
     * @return KullanÄ±cÄ± nesnesi
     */
    public User getMe(User currentUser) {
        if (currentUser == null)
            throw new RuntimeException("KullanÄ±cÄ± bilgisi bulunamadÄ± (token geÃ§ersiz veya eksik).");

        return currentUser;
    }
}
