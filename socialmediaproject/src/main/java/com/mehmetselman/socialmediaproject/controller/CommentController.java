package com.mehmetselman.socialmediaproject.controller;

import com.mehmetselman.socialmediaproject.entity.Comment;
import com.mehmetselman.socialmediaproject.entity.User;
import com.mehmetselman.socialmediaproject.service.CommentService;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Map;

/**
 * âœ… CommentController (Nested yapÄ±: /api/posts/{postId}/comments)
 *
 * Bu controller, belirli bir gÃ¶nderi (Post) altÄ±ndaki yorumlarÄ± yÃ¶netir:
 *  - Yorum ekleme (POST)
 *  - Yorum listeleme (GET)
 *  - Yorum silme (DELETE)
 *
 * ğŸ”’ TÃ¼m iÅŸlemler JWT doÄŸrulamasÄ± gerektirir (AuthFilter tarafÄ±ndan yÃ¶netilir).
 */
@RestController
@RequestMapping("/api/posts/{postId}/comments")
public class CommentController {

    @Autowired
    private CommentService commentService;

    /**
     * ğŸ§© Belirli bir gÃ¶nderiye ait TÃœM yorumlarÄ± listeler.
     * Endpoint: GET /api/posts/{postId}/comments
     *
     * @param postId GÃ¶nderi ID'si
     * @return List<Comment> â†’ Ä°lgili gÃ¶nderiye ait yorumlar
     */
    @GetMapping
    public List<Comment> getCommentsByPost(@PathVariable Long postId) {
        return commentService.getCommentsByPost(postId);
    }

    /**
     * ğŸ§© Yeni bir yorum oluÅŸturur.
     * Endpoint: POST /api/posts/{postId}/comments
     *
     * @param postId GÃ¶nderi ID'si
     * @param request JWTâ€™den gelen kullanÄ±cÄ± bilgisi
     * @param body JSON gÃ¶vdesinde "text" alanÄ± beklenir
     * @return OluÅŸturulan Comment nesnesi
     */
    @PostMapping
    public Comment addComment(@PathVariable Long postId,
                              HttpServletRequest request,
                              @RequestBody Map<String, String> body) {

        User currentUser = (User) request.getAttribute("currentUser");
        if (currentUser == null) {
            throw new RuntimeException("KullanÄ±cÄ± doÄŸrulanamadÄ±! LÃ¼tfen giriÅŸ yapÄ±nÄ±z.");
        }

        String text = body.get("text");
        if (text == null || text.trim().isEmpty()) {
            throw new RuntimeException("'text' alanÄ± boÅŸ olamaz!");
        }

        return commentService.addComment(currentUser, postId, text.trim());
    }

    /**
     * ğŸ§© Belirli bir yorumu siler.
     * Endpoint: DELETE /api/posts/{postId}/comments/{commentId}
     *
     * Sadece yorumu oluÅŸturan kullanÄ±cÄ± veya ADMIN rolÃ¼ndeki kullanÄ±cÄ± silebilir.
     *
     * @param postId GÃ¶nderi ID'si (kontrol amaÃ§lÄ±)
     * @param commentId Silinecek yorum ID'si
     * @param request JWTâ€™den gelen kullanÄ±cÄ± bilgisi
     */
    @DeleteMapping("/{commentId}")
    public void deleteComment(@PathVariable Long postId,
                              @PathVariable Long commentId,
                              HttpServletRequest request) {

        User currentUser = (User) request.getAttribute("currentUser");
        if (currentUser == null) {
            throw new RuntimeException("KullanÄ±cÄ± doÄŸrulanamadÄ±! LÃ¼tfen giriÅŸ yapÄ±nÄ±z.");
        }

        commentService.deleteComment(commentId, currentUser);
    }
}
