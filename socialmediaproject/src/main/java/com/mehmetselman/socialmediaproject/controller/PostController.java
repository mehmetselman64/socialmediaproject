package com.mehmetselman.socialmediaproject.controller;

import com.mehmetselman.socialmediaproject.entity.Post;
import com.mehmetselman.socialmediaproject.entity.User;
import com.mehmetselman.socialmediaproject.service.PostService;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

/**
 * âœ… PostController
 *
 * Bu controller, REST API Ã¼zerinden post (gÃ¶nderi) iÅŸlemlerini yÃ¶netir.
 *
 * Ä°Ã§erdiÄŸi iÅŸlemler:
 *  - Post oluÅŸturma (create)
 *  - Tek bir postu getirme (read)
 *  - TÃ¼m postlarÄ± listeleme
 *  - Post gÃ¼ncelleme
 *  - Post silme
 *  - Post gÃ¶rÃ¼ntÃ¼lenme sayÄ±sÄ±nÄ± artÄ±rma
 *
 * EriÅŸim yolu: `/api/posts`
 */
@RestController
@RequestMapping("/api/posts")
public class PostController {

    @Autowired
    private PostService postService;

    /**
     * ğŸ”¹ POST /api/posts
     *
     * Yeni bir gÃ¶nderi (post) oluÅŸturur.
     *
     * Ä°stek gÃ¶vdesi (JSON):
     * ```json
     * {
     *   "description": "BugÃ¼n hava Ã§ok gÃ¼zel!",
     *   "imageUrl": "https://example.com/image.jpg"
     * }
     * ```
     *
     * Tokenâ€™dan gelen kullanÄ±cÄ± bilgisi (`AuthFilter`) `request` nesnesi Ã¼zerinden alÄ±nÄ±r.
     *
     * @param request AuthFilter tarafÄ±ndan eklenen currentUser bilgisini iÃ§erir
     * @param body description (aÃ§Ä±klama) ve imageUrl deÄŸerlerini iÃ§erir
     * @return OluÅŸturulan Post nesnesi
     */
    @PostMapping
    public Post createPost(HttpServletRequest request, @RequestBody Map<String, String> body) {
        User author = (User) request.getAttribute("currentUser");
        return postService.createPost(author, body.get("description"), body.get("imageUrl"));
    }

    /**
     * ğŸ”¹ GET /api/posts/{id}
     *
     * Belirli bir postâ€™u IDâ€™sine gÃ¶re getirir.
     *
     * Ã–rnek:
     * ```
     * GET http://localhost:8080/api/posts/5
     * ```
     *
     * @param id Post IDâ€™si
     * @return Post nesnesi
     */
    @GetMapping("/{id}")
    public Post getPost(@PathVariable Long id) {
        return postService.getPost(id);
    }

    /**
     * ğŸ”¹ GET /api/posts
     *
     * TÃ¼m postlarÄ± getirir.
     *
     * Ã–rnek:
     * ```
     * GET http://localhost:8080/api/posts
     * ```
     *
     * @return TÃ¼m postlarÄ±n listesi
     */
    @GetMapping
    public List<Post> getAllPosts() {
        return postService.getAllPosts();
    }

    /**
     * ğŸ”¹ PUT /api/posts/{id}
     *
     * Belirli bir postu gÃ¼nceller.
     *
     * - Sadece gÃ¶nderinin sahibi (author) gÃ¼ncelleme yapabilir.
     *
     * Ä°stek gÃ¶vdesi (JSON):
     * ```json
     * {
     *   "description": "GÃ¼ncellenmiÅŸ aÃ§Ä±klama",
     *   "imageUrl": "https://example.com/new-image.jpg"
     * }
     * ```
     *
     * @param id GÃ¼ncellenecek post IDâ€™si
     * @param request Tokenâ€™dan gelen kullanÄ±cÄ±yÄ± iÃ§erir
     * @param body Yeni description ve imageUrl deÄŸerlerini iÃ§erir
     */
    @PutMapping("/{id}")
    public void updatePost(@PathVariable Long id, HttpServletRequest request, @RequestBody Map<String, String> body) {
        User currentUser = (User) request.getAttribute("currentUser");
        postService.updatePost(id, currentUser, body.get("description"), body.get("imageUrl"));
    }

    /**
     * ğŸ”¹ DELETE /api/posts/{id}
     *
     * Belirli bir postu siler.
     *
     * - Sadece postâ€™un sahibi veya ADMIN rolÃ¼ndeki kullanÄ±cÄ± silebilir.
     *
     * Ã–rnek:
     * ```
     * DELETE http://localhost:8080/api/posts/7
     * ```
     *
     * @param id Silinecek postâ€™un IDâ€™si
     * @param request Tokenâ€™dan gelen kullanÄ±cÄ±yÄ± iÃ§erir
     */
    @DeleteMapping("/{id}")
    public void deletePost(@PathVariable Long id, HttpServletRequest request) {
        User currentUser = (User) request.getAttribute("currentUser");
        postService.deletePost(id, currentUser);
    }

    /**
     * ğŸ”¹ POST /api/posts/{id}/view
     *
     * Postâ€™un gÃ¶rÃ¼ntÃ¼lenme sayÄ±sÄ±nÄ± 1 artÄ±rÄ±r.
     *
     * Bu endpoint, kullanÄ±cÄ± giriÅŸine gerek olmadan da kullanÄ±labilir.
     *
     * Ã–rnek:
     * ```
     * POST http://localhost:8080/api/posts/3/view
     * ```
     *
     * @param id GÃ¶rÃ¼ntÃ¼lenen post IDâ€™si
     */
    @PostMapping("/{id}/view")
    public void viewPost(@PathVariable Long id) {
        postService.viewPost(id);
    }
}
