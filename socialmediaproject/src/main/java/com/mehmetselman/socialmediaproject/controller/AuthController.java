package com.mehmetselman.socialmediaproject.controller;

import com.mehmetselman.socialmediaproject.entity.User;
import com.mehmetselman.socialmediaproject.service.AuthService;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.Map;

/**
 * âœ… AuthController kimlik doÄŸrulama iÅŸlemlerini yÃ¶netir.
 * - KullanÄ±cÄ± kayÄ±t olma
 * - GiriÅŸ (JWT Ã¼retimi)
 * - Ã‡Ä±kÄ±ÅŸ (token silme)
 * - Me (kimlik doÄŸrulama testi)
 */
@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private AuthService authService;

    /**
     * ğŸ§© Yeni kullanÄ±cÄ± kaydÄ±.
     */
    @PostMapping("/signup")
    public User signup(@RequestBody Map<String, String> body) {
        return authService.signup(body.get("username"), body.get("password"));
    }

    /**
     * ğŸ§© GiriÅŸ yapar, JWT token dÃ¶ner.
     */
    @PostMapping("/login")
    public Map<String, Object> login(@RequestBody Map<String, String> body) {
        return authService.login(body.get("username"), body.get("password"));
    }

    /**
     * ğŸ§© JWT tokenâ€™Ä± siler (logout iÅŸlemi).
     */
    @PostMapping("/logout")
    public void logout(HttpServletRequest request) {
        String header = request.getHeader("Authorization");
        if (header != null && header.startsWith("Bearer ")) {
            String token = header.substring(7);
            authService.logout(token);
        } else {
            throw new RuntimeException("Token bulunamadÄ±!");
        }
    }

    /**
     * ğŸ§© KullanÄ±cÄ±nÄ±n kimlik bilgilerini dÃ¶ner (me endpoint).
     * ğŸ”’ JWT doÄŸrulamasÄ± sonrasÄ± AuthFilter tarafÄ±ndan `currentUser` atanÄ±r.
     */
    @GetMapping("/me")
    public User me(HttpServletRequest request) {
        User currentUser = (User) request.getAttribute("currentUser");
        return authService.getMe(currentUser);
    }
}
